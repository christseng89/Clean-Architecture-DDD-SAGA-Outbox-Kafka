66. Introduction to Outbox pattern

- Outbox: Help use of local ACID transactions to let consistent (eventual) distributed 
  transactions. 
- It will complete SAGA in a SAFE and CONSISTENT way. 
- Persist events in local database automatically with ACID transaction
- Read the events and publish
   - Pulling Outbox Table: Pull the events with a scheduler
   - Change Data Capture: Listen transaction logs
- Keep track of Saga and order status in Outbox Table
- Ensure Idempotency: Do not consume the same data 
  在数学计算或者计算机科学中，幂等性（idempotence）是指相同操作或资源在一次或
  多次请求中具有同样效果的作用。 幂等性在分布式系统设计中具有十分重要的地位。
  https://iter01.com/566612.html

- Optimistic locks and DB Constraints: Prevent data corruption

https://medium.com/skyler-record/%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E7%9A%84%E8%B3%87%E6%96%99%E4%B8%80%E8%87%B4%E6%80%A7-2-outbox-pattern-891512620453

68. Refactoring Order domain layer: Adding Outbox models & Updating ports
- PaymentOutbox = Payment Outbox
- ApprovalOutbox = Restaurant Approval Outbox

### Delete Interfaces later on
- OrderCancelledPaymentRequestMessagePublisher
- OrderCreatedPaymentRequestMessagePublisher

- OrderPaidRestaurantRequestMessagePublisher

69. Refactoring Order domain layer: Adding Outbox scheduler
OrderStatus == PENDING || CANCELLING || PAID(x) (All records fullfil with conditions)
  OutboxStatus.STARTED, 
  SagaStatus.STARTED,
  SagaStatus.COMPENSATING);
