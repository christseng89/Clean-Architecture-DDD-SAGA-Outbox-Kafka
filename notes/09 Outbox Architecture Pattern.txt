66. Introduction to Outbox pattern

https://microservices.io/patterns/data/transactional-outbox.html

- Outbox: Help use of local ACID transactions to let consistent (eventual) distributed 
  transactions. 
- It will complete SAGA in a SAFE and CONSISTENT way. 
- Persist events in local database automatically with ACID transaction
- Read the events and publish
   - Pulling Outbox Table: Pull the events with a scheduler
   - Change Data Capture: Listen transaction logs
- Keep track of Saga and order status in Outbox Table
- Ensure Idempotency: Do not consume the same data 
  在数学计算或者计算机科学中，幂等性（Idempotency）是指相同操作或资源在一次或
  多次请求中具有同样效果的作用。 幂等性在分布式系统设计中具有十分重要的地位。
  https://iter01.com/566612.html

- Optimistic locks and DB Constraints: Prevent data corruption

https://medium.com/skyler-record/%E5%BE%AE%E6%9C%8D%E5%8B%99%E6%9E%B6%E7%9A%84%E8%B3%87%E6%96%99%E4%B8%80%E8%87%B4%E6%80%A7-2-outbox-pattern-891512620453

68. Refactoring Order domain layer: Adding Outbox models & Updating ports
- PaymentOutbox = Payment Outbox
- ApprovalOutbox = Restaurant Approval Outbox

### Delete Interfaces later on
- OrderCancelledPaymentRequestMessagePublisher
- OrderCreatedPaymentRequestMessagePublisher

- OrderPaidRestaurantRequestMessagePublisher

69. Refactoring Order domain layer: Adding Outbox scheduler for Payment
OrderStatus == PENDING || CANCELLING && SagaStatus... (All records fullfil with conditions) 
  OutboxStatus.STARTED, 

  SagaStatus.STARTED, or
  SagaStatus.COMPENSATING);

70. Refactoring Order domain layer: Adding Outbox cleaner scheduler for Payment
OrderStatus == COMPLETED && SagaStatus... (All records fullfil with conditions) 
  OutboxStatus.COMPLETED,

  SagaStatus.SUCCEEDED, or
  SagaStatus.COMPENSATED, or
  SagaStatus.FAILED);

71. Refactoring Order domain layer: Adding Outbox schedulers for Approval
OrderStatus == COMPLETED && SagaStatus == PROCESSING
  OutboxStatus.STARTED,
  SagaStatus.PROCESSING;

72. Refactoring Order domain layer: Updating OrderCreate Command Handler 73 & 74. Refactoring Order domain layer: Updating Order Payment Saga
### Delete Interfaces 
- OrderCancelledPaymentRequestMessagePublisher
- OrderCreatedPaymentRequestMessagePublisher
- OrderPaidRestaurantRequestMessagePublisher

OrderCreateCommandHandler
  @Transactional
  public CreateOrderResponse createOrder(CreateOrderCommand createOrderCommand) {
    ...

    // Save payment outbox
    paymentOutboxHelper.savePaymentOutboxMessage(
      orderDataMapper.orderCreatedEventToOrderPaymentEventPayload(orderCreatedEvent),
      orderCreatedEvent.getOrder().getOrderStatus(),
      orderSagaHelper.orderStatusToSagaStatus(orderCreatedEvent.getOrder().getOrderStatus()),
      OutboxStatus.STARTED,
      UUID.randomUUID());

    log.info("Returning CreateOrderResponse with order id: {}", orderCreatedEvent.getOrder().getId());

    return createOrderResponse;
  }
  
74. Refactoring Order domain layer: Updating Order Payment Saga (OrderPaymentSaga)
Idempotency => PaymentOutboxEntity
...
JPA Optimistic locking => https://www.byteslounge.com/tutorials/jpa-entity-versioning-version-and-optimistic-locking

  PRODUCT:
  =============================
  ID	DESCRIPTION	PRICE	VERSION
  1	  Book	      11.00	3
  2	  Television	99.00	7

  UPDATE PRODUCT
  SET PRICE = 14.00, VERSION = 4
  WHERE ID = 1
  AND VERSION = 3;


A.  @Version (OrderOutboxEntity, PaymentOutboxEntity, ApprovalOutboxEntity)
    private int version;
    ...
B.  UNIQUE INDEXES

    * Order Container
    UNIQUE INDEX - saga_id   
    CREATE UNIQUE INDEX "payment_outbox_saga_id"
    ON "order".payment_outbox
        (type, saga_id, saga_status);

    // type = ORDER_SAGA_NAME = "OrderProcessingSaga";

    CREATE UNIQUE INDEX "restaurant_approval_outbox_saga_id"
        ON "order".restaurant_approval_outbox
            (type, saga_id, saga_status);

    * Payment Container
    CREATE UNIQUE INDEX "payment_order_outbox_saga_id_payment_status_outbox_status"
        ON "payment".order_outbox
            (type, saga_id, payment_status, outbox_status);

    * Restaurant Container
    CREATE UNIQUE INDEX "restaurant_order_outbox_saga_id"
        ON "restaurant".order_outbox
            (type, saga_id, approval_status, outbox_status);
