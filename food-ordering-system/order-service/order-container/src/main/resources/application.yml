server:
  port: 8181
  max-http-header-size: 8KB
  compression:
    enabled: true
  tomcat:
    max-threads: 200
    min-spare-threads: 10
    connection-timeout: 20000
    max-connections: 8192
    accept-count: 100
    max-http-form-post-size: 2MB

logging:
  level:
    com.food.ordering.system: INFO
    org.springframework.security: INFO
    root: WARN
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/order-service.log
    max-size: 10MB
    max-history: 10

order-service:
  payment-request-topic-name: payment-request
  payment-response-topic-name: payment-response
  restaurant-approval-request-topic-name: restaurant-approval-request
  restaurant-approval-response-topic-name: restaurant-approval-response
  customer-topic-name: customer
  outbox-scheduler-fixed-rate: 10000
  outbox-scheduler-initial-delay: 10000

spring:
  jpa:
    open-in-view: false
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        generate_statistics: false
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/postgres?currentSchema=order&binaryTransfer=true&reWriteBatchedInserts=true&stringtype=unspecified}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:admin}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  sql:
    init:
      platform: postgres
      schema-locations: classpath:init-schema.sql
      mode: always

kafka-config:
  bootstrap-servers: localhost:19092, localhost:29092, localhost:39092
  schema-registry-url-key: schema.registry.url
  schema-registry-url: http://localhost:8081
  num-of-partitions: 3
  replication-factor: 3

kafka-producer-config:
  key-serializer-class: org.apache.kafka.common.serialization.StringSerializer
  value-serializer-class: io.confluent.kafka.serializers.KafkaAvroSerializer
  compression-type: snappy
  acks: all
  batch-size: 16384
  batch-size-boost-factor: 100
  linger-ms: 5
  request-timeout-ms: 60000
  retry-count: 5

kafka-consumer-config:
  key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
  payment-consumer-group-id: payment-topic-consumer
  restaurant-approval-consumer-group-id: restaurant-approval-topic-consumer
  customer-group-id: customer-topic-consumer
  auto-offset-reset: earliest
  specific-avro-reader-key: specific.avro.reader
  specific-avro-reader: true
  batch-listener: true
  auto-startup: true
  concurrency-level: 3
  session-timeout-ms: 10000
  heartbeat-interval-ms: 3000
  max-poll-interval-ms: 300000
  max-poll-records: 500
  max-partition-fetch-bytes-default: 1048576
  max-partition-fetch-bytes-boost-factor: 1
  poll-timeout-ms: 150

# Security Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
  security:
    enabled: true

  security:
    require-ssl: false
    headers:
      frame-options: DENY
      content-type-options: nosniff
      xss-protection: 1; mode=block
    csrf:
      cookie:
        secure: true
        http-only: true
        same-site: strict
    session:
      cookie:
        secure: true
        http-only: true
        max-age: 1800
        same-site: strict
      timeout: 30m
      store-type: jdbc
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${JWT_JWK_SET_URI:}
  servlet:
    multipart:
      max-file-size: 1MB
      max-request-size: 10MB
      enabled: true
  jackson:
    default-property-inclusion: NON_NULL
    deserialization:
      fail-on-unknown-properties: true
  session:
    store-type: jdbc
    jdbc:
      initialize-schema: always
      table-name: SPRING_SESSION

# Rate Limiting
resilience4j:
  ratelimiter:
    instances:
      order-service:
        limit-for-period: 100
        limit-refresh-period: 1s
        timeout-duration: 5s
  circuitbreaker:
    instances:
      order-service:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10